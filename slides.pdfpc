{"pdfpcFormat":2,"disableMarkdown":false,"pages":[{"idx":0,"label":"0","overlay":0,"forcedOverlay":false,"hidden":false},{"idx":1,"label":"1","overlay":0,"forcedOverlay":false,"hidden":false},{"idx":2,"label":"2","overlay":0,"forcedOverlay":false,"hidden":false},{"idx":3,"label":"3","overlay":0,"forcedOverlay":false,"hidden":false,"note":"+ Don't worry if you don't know what Nix is yet – in fact, it's probably better if you don't \n+ Most Nix users don't even know what Nix is or how it works! \n+ Explaining Nix to a total beginner is actually easier \n+ The reason for this is that different people use Nix for different things \n+ Every Nix user learned Nix in different ways \n+ Most people hear about Nix because someone tried selling it to them – often just the parts that *they* care about \n+ And in fact, here we are in this lecture, and I'm also here to sell you Nix! \n+ I believe Nix solves problems everybody here has encountered, even if not all things Nix offers are relevant to you \n+ Nix is not a single technology but rather an implementation of an idea with a solid theoretical foundation and an area of active research \n+ This means that the things we'll talk about today are highly transferrable \n+ Whether or not you end up using Nix, these ideas will shape the future of software engineering"},{"idx":4,"label":"4","overlay":0,"forcedOverlay":false,"hidden":false,"note":"+ Nix was created in 2006 by Eelco Dolstra who introduced it as such \n+ In principle, computer programs are a set of files, so transferring them between computers is a simple matter of copying those files \n+ As you might already suspect, copying is not the issue – but we thought it was a good idea that the files should also work the same way on both machines \n+ There are several reasons this is a hard problem worth solving: \n  + There are more and more computers in the world \n  + Despite standardisation, computers are more and more different \n  + The software we want to run is more and more complex \n+ We can't really change the first two things, but let's think about what makes a program complex"},{"idx":5,"label":"4","overlay":1,"forcedOverlay":true,"hidden":false,"note":"+ Nix was created in 2006 by Eelco Dolstra who introduced it as such \n+ In principle, computer programs are a set of files, so transferring them between computers is a simple matter of copying those files \n+ As you might already suspect, copying is not the issue – but we thought it was a good idea that the files should also work the same way on both machines \n+ There are several reasons this is a hard problem worth solving: \n  + There are more and more computers in the world \n  + Despite standardisation, computers are more and more different \n  + The software we want to run is more and more complex \n+ We can't really change the first two things, but let's think about what makes a program complex"},{"idx":6,"label":"5","overlay":0,"forcedOverlay":false,"hidden":false,"note":"+ Software is ultimately 'just a set of files' – but we increasingly build our software on top of existing components that we call dependencies \n+ ✋: Who has installed a compiler in the last year? \n+ ✋: Who has had to collaborate with another person on a software project? \n+ ✋: Who ran into issues doing any of these? \n+ People who did not raise their hands either don't write software or are in an ecosystem that solves these problems for them \n+ For the rest of us (and in the general case), the problem is not yet solved \n+ A common form of specification is documentation (README, …) \n+ Documentation may not be complete, correct, up-to-date, or even present at all \n+ This hurts the user, not the author; keep testing the specification"},{"idx":7,"label":"5","overlay":1,"forcedOverlay":true,"hidden":false,"note":"+ Software is ultimately 'just a set of files' – but we increasingly build our software on top of existing components that we call dependencies \n+ ✋: Who has installed a compiler in the last year? \n+ ✋: Who has had to collaborate with another person on a software project? \n+ ✋: Who ran into issues doing any of these? \n+ People who did not raise their hands either don't write software or are in an ecosystem that solves these problems for them \n+ For the rest of us (and in the general case), the problem is not yet solved \n+ A common form of specification is documentation (README, …) \n+ Documentation may not be complete, correct, up-to-date, or even present at all \n+ This hurts the user, not the author; keep testing the specification"},{"idx":8,"label":"5","overlay":2,"forcedOverlay":true,"hidden":false,"note":"+ Software is ultimately 'just a set of files' – but we increasingly build our software on top of existing components that we call dependencies \n+ ✋: Who has installed a compiler in the last year? \n+ ✋: Who has had to collaborate with another person on a software project? \n+ ✋: Who ran into issues doing any of these? \n+ People who did not raise their hands either don't write software or are in an ecosystem that solves these problems for them \n+ For the rest of us (and in the general case), the problem is not yet solved \n+ A common form of specification is documentation (README, …) \n+ Documentation may not be complete, correct, up-to-date, or even present at all \n+ This hurts the user, not the author; keep testing the specification"},{"idx":9,"label":"5","overlay":3,"forcedOverlay":true,"hidden":false,"note":"+ Software is ultimately 'just a set of files' – but we increasingly build our software on top of existing components that we call dependencies \n+ ✋: Who has installed a compiler in the last year? \n+ ✋: Who has had to collaborate with another person on a software project? \n+ ✋: Who ran into issues doing any of these? \n+ People who did not raise their hands either don't write software or are in an ecosystem that solves these problems for them \n+ For the rest of us (and in the general case), the problem is not yet solved \n+ A common form of specification is documentation (README, …) \n+ Documentation may not be complete, correct, up-to-date, or even present at all \n+ This hurts the user, not the author; keep testing the specification"},{"idx":10,"label":"5","overlay":4,"forcedOverlay":true,"hidden":false,"note":"+ Software is ultimately 'just a set of files' – but we increasingly build our software on top of existing components that we call dependencies \n+ ✋: Who has installed a compiler in the last year? \n+ ✋: Who has had to collaborate with another person on a software project? \n+ ✋: Who ran into issues doing any of these? \n+ People who did not raise their hands either don't write software or are in an ecosystem that solves these problems for them \n+ For the rest of us (and in the general case), the problem is not yet solved \n+ A common form of specification is documentation (README, …) \n+ Documentation may not be complete, correct, up-to-date, or even present at all \n+ This hurts the user, not the author; keep testing the specification"},{"idx":11,"label":"5","overlay":5,"forcedOverlay":true,"hidden":false,"note":"+ Software is ultimately 'just a set of files' – but we increasingly build our software on top of existing components that we call dependencies \n+ ✋: Who has installed a compiler in the last year? \n+ ✋: Who has had to collaborate with another person on a software project? \n+ ✋: Who ran into issues doing any of these? \n+ People who did not raise their hands either don't write software or are in an ecosystem that solves these problems for them \n+ For the rest of us (and in the general case), the problem is not yet solved \n+ A common form of specification is documentation (README, …) \n+ Documentation may not be complete, correct, up-to-date, or even present at all \n+ This hurts the user, not the author; keep testing the specification"},{"idx":12,"label":"6","overlay":0,"forcedOverlay":false,"hidden":false,"note":"+ Linux is an example of an ecosystem that solves these problems for you \n+ Examples include: apt, rpm, Homebrew, flatpak \n+ Even if you use the same package manager, on different computers you might get different versions \n+ When updating software, old versions are deleted \n+ Updating one program's dependency interferes with all other programs that have this dependency"},{"idx":13,"label":"6","overlay":1,"forcedOverlay":true,"hidden":false,"note":"+ Linux is an example of an ecosystem that solves these problems for you \n+ Examples include: apt, rpm, Homebrew, flatpak \n+ Even if you use the same package manager, on different computers you might get different versions \n+ When updating software, old versions are deleted \n+ Updating one program's dependency interferes with all other programs that have this dependency"},{"idx":14,"label":"6","overlay":2,"forcedOverlay":true,"hidden":false,"note":"+ Linux is an example of an ecosystem that solves these problems for you \n+ Examples include: apt, rpm, Homebrew, flatpak \n+ Even if you use the same package manager, on different computers you might get different versions \n+ When updating software, old versions are deleted \n+ Updating one program's dependency interferes with all other programs that have this dependency"},{"idx":15,"label":"6","overlay":3,"forcedOverlay":true,"hidden":false,"note":"+ Linux is an example of an ecosystem that solves these problems for you \n+ Examples include: apt, rpm, Homebrew, flatpak \n+ Even if you use the same package manager, on different computers you might get different versions \n+ When updating software, old versions are deleted \n+ Updating one program's dependency interferes with all other programs that have this dependency"},{"idx":16,"label":"6","overlay":4,"forcedOverlay":true,"hidden":false,"note":"+ Linux is an example of an ecosystem that solves these problems for you \n+ Examples include: apt, rpm, Homebrew, flatpak \n+ Even if you use the same package manager, on different computers you might get different versions \n+ When updating software, old versions are deleted \n+ Updating one program's dependency interferes with all other programs that have this dependency"},{"idx":17,"label":"6","overlay":5,"forcedOverlay":true,"hidden":false,"note":"+ Linux is an example of an ecosystem that solves these problems for you \n+ Examples include: apt, rpm, Homebrew, flatpak \n+ Even if you use the same package manager, on different computers you might get different versions \n+ When updating software, old versions are deleted \n+ Updating one program's dependency interferes with all other programs that have this dependency"},{"idx":18,"label":"6","overlay":6,"forcedOverlay":true,"hidden":false,"note":"+ Linux is an example of an ecosystem that solves these problems for you \n+ Examples include: apt, rpm, Homebrew, flatpak \n+ Even if you use the same package manager, on different computers you might get different versions \n+ When updating software, old versions are deleted \n+ Updating one program's dependency interferes with all other programs that have this dependency"},{"idx":19,"label":"6","overlay":7,"forcedOverlay":true,"hidden":false,"note":"+ Linux is an example of an ecosystem that solves these problems for you \n+ Examples include: apt, rpm, Homebrew, flatpak \n+ Even if you use the same package manager, on different computers you might get different versions \n+ When updating software, old versions are deleted \n+ Updating one program's dependency interferes with all other programs that have this dependency"},{"idx":20,"label":"6","overlay":8,"forcedOverlay":true,"hidden":false,"note":"+ Linux is an example of an ecosystem that solves these problems for you \n+ Examples include: apt, rpm, Homebrew, flatpak \n+ Even if you use the same package manager, on different computers you might get different versions \n+ When updating software, old versions are deleted \n+ Updating one program's dependency interferes with all other programs that have this dependency"},{"idx":21,"label":"7","overlay":0,"forcedOverlay":false,"hidden":false,"note":""},{"idx":22,"label":"7","overlay":1,"forcedOverlay":true,"hidden":false,"note":""},{"idx":23,"label":"7","overlay":2,"forcedOverlay":true,"hidden":false,"note":""},{"idx":24,"label":"7","overlay":3,"forcedOverlay":true,"hidden":false,"note":""},{"idx":25,"label":"8","overlay":0,"forcedOverlay":false,"hidden":false},{"idx":26,"label":"8","overlay":1,"forcedOverlay":true,"hidden":false},{"idx":27,"label":"8","overlay":2,"forcedOverlay":true,"hidden":false},{"idx":28,"label":"9","overlay":0,"forcedOverlay":false,"hidden":false,"note":"+ As mentioned, Nix is not just one thing but an ecosystem \n+ Parts of this ecosystem are named somewhat confusingly \n+ Let's introduce the main characters \n+ From now on, Nix shall refer to the package manager"},{"idx":29,"label":"9","overlay":1,"forcedOverlay":true,"hidden":false,"note":"+ As mentioned, Nix is not just one thing but an ecosystem \n+ Parts of this ecosystem are named somewhat confusingly \n+ Let's introduce the main characters \n+ From now on, Nix shall refer to the package manager"},{"idx":30,"label":"9","overlay":2,"forcedOverlay":true,"hidden":false,"note":"+ As mentioned, Nix is not just one thing but an ecosystem \n+ Parts of this ecosystem are named somewhat confusingly \n+ Let's introduce the main characters \n+ From now on, Nix shall refer to the package manager"},{"idx":31,"label":"9","overlay":3,"forcedOverlay":true,"hidden":false,"note":"+ As mentioned, Nix is not just one thing but an ecosystem \n+ Parts of this ecosystem are named somewhat confusingly \n+ Let's introduce the main characters \n+ From now on, Nix shall refer to the package manager"},{"idx":32,"label":"9","overlay":4,"forcedOverlay":true,"hidden":false,"note":"+ As mentioned, Nix is not just one thing but an ecosystem \n+ Parts of this ecosystem are named somewhat confusingly \n+ Let's introduce the main characters \n+ From now on, Nix shall refer to the package manager"},{"idx":33,"label":"10","overlay":0,"forcedOverlay":false,"hidden":false,"note":"+ To understand how Nix works, we must introduce a central concept called the Nix store \n+ To help illustrate the concept, I will draw a parallel with how programs interact with computer memory"},{"idx":34,"label":"11","overlay":0,"forcedOverlay":false,"hidden":false},{"idx":35,"label":"11","overlay":1,"forcedOverlay":true,"hidden":false},{"idx":36,"label":"11","overlay":2,"forcedOverlay":true,"hidden":false},{"idx":37,"label":"11","overlay":3,"forcedOverlay":true,"hidden":false},{"idx":38,"label":"12","overlay":0,"forcedOverlay":false,"hidden":false},{"idx":39,"label":"12","overlay":1,"forcedOverlay":true,"hidden":false},{"idx":40,"label":"12","overlay":2,"forcedOverlay":true,"hidden":false},{"idx":41,"label":"12","overlay":3,"forcedOverlay":true,"hidden":false},{"idx":42,"label":"12","overlay":4,"forcedOverlay":true,"hidden":false},{"idx":43,"label":"12","overlay":5,"forcedOverlay":true,"hidden":false},{"idx":44,"label":"12","overlay":6,"forcedOverlay":true,"hidden":false},{"idx":45,"label":"13","overlay":0,"forcedOverlay":false,"hidden":false,"note":"+ If store objects are produced by functions that take store objects as inputs, who created the first store objects?"},{"idx":46,"label":"13","overlay":1,"forcedOverlay":true,"hidden":false,"note":"+ If store objects are produced by functions that take store objects as inputs, who created the first store objects?"},{"idx":47,"label":"14","overlay":0,"forcedOverlay":false,"hidden":false},{"idx":48,"label":"14","overlay":1,"forcedOverlay":true,"hidden":false},{"idx":49,"label":"14","overlay":2,"forcedOverlay":true,"hidden":false},{"idx":50,"label":"14","overlay":3,"forcedOverlay":true,"hidden":false},{"idx":51,"label":"14","overlay":4,"forcedOverlay":true,"hidden":false},{"idx":52,"label":"14","overlay":5,"forcedOverlay":true,"hidden":false},{"idx":53,"label":"14","overlay":6,"forcedOverlay":true,"hidden":false},{"idx":54,"label":"15","overlay":0,"forcedOverlay":false,"hidden":false},{"idx":55,"label":"16","overlay":0,"forcedOverlay":false,"hidden":false},{"idx":56,"label":"17","overlay":0,"forcedOverlay":false,"hidden":false},{"idx":57,"label":"17","overlay":1,"forcedOverlay":true,"hidden":false},{"idx":58,"label":"17","overlay":2,"forcedOverlay":true,"hidden":false},{"idx":59,"label":"18","overlay":0,"forcedOverlay":false,"hidden":false,"note":"+ Precompute the output path from the hash of its inputs \n+ Automatically copy referenced paths into the Nix store"},{"idx":60,"label":"18","overlay":1,"forcedOverlay":true,"hidden":false,"note":"+ Precompute the output path from the hash of its inputs \n+ Automatically copy referenced paths into the Nix store"},{"idx":61,"label":"19","overlay":0,"forcedOverlay":false,"hidden":false},{"idx":62,"label":"19","overlay":1,"forcedOverlay":true,"hidden":false},{"idx":63,"label":"19","overlay":2,"forcedOverlay":true,"hidden":false},{"idx":64,"label":"19","overlay":3,"forcedOverlay":true,"hidden":false},{"idx":65,"label":"19","overlay":4,"forcedOverlay":true,"hidden":false},{"idx":66,"label":"20","overlay":0,"forcedOverlay":false,"hidden":false},{"idx":67,"label":"20","overlay":1,"forcedOverlay":true,"hidden":false},{"idx":68,"label":"20","overlay":2,"forcedOverlay":true,"hidden":false},{"idx":69,"label":"20","overlay":3,"forcedOverlay":true,"hidden":false},{"idx":70,"label":"20","overlay":4,"forcedOverlay":true,"hidden":false},{"idx":71,"label":"20","overlay":5,"forcedOverlay":true,"hidden":false},{"idx":72,"label":"20","overlay":6,"forcedOverlay":true,"hidden":false},{"idx":73,"label":"20","overlay":7,"forcedOverlay":true,"hidden":false},{"idx":74,"label":"21","overlay":0,"forcedOverlay":false,"hidden":false},{"idx":75,"label":"21","overlay":1,"forcedOverlay":true,"hidden":false},{"idx":76,"label":"21","overlay":2,"forcedOverlay":true,"hidden":false},{"idx":77,"label":"21","overlay":3,"forcedOverlay":true,"hidden":false},{"idx":78,"label":"22","overlay":0,"forcedOverlay":false,"hidden":false,"note":"+ The builder does not have to be bash"},{"idx":79,"label":"23","overlay":0,"forcedOverlay":false,"hidden":false,"note":"+"},{"idx":80,"label":"24","overlay":0,"forcedOverlay":false,"hidden":false,"note":"+"},{"idx":81,"label":"25","overlay":0,"forcedOverlay":false,"hidden":false},{"idx":82,"label":"26","overlay":0,"forcedOverlay":false,"hidden":false}]}
